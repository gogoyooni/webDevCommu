// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserType {
  LEADER
  MEMBER
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  posts            Post[]
  comments         Comment[]
  // likes         Like[]
  userLikePosts    UserLikePost[]
  userLikeComments UserLikeComment[]

  // notifications Notification[]
  notifications PostNotification[]

  sentInvitations     Invitation[] @relation("sender")
  receivedInvitations Invitation[] @relation("receiver")

  // sentInvitations InviteUser[] @relation("sender")
  //   receivedInvitations InviteUser[] @relation("receiver")

  // invitations Invitation[]

  // teams Team[] 
  membership Membership[]

  // Team   Team?   @relation(fields: [teamId], references: [id])
  // teamId String?
  // Team   Team[]
  // teams   Team[]
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  title     String
  content   String
  // url String //이건 여기서 지워도됨.. 누가 이 포스트에 댓글을 썼는지, like 했는지 등 notification에서 이동할 수 있게
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id])

  // likes         Like[]
  likes    UserLikePost[]
  // notifications Notification[]
  comments Comment[]

  @@index([authorId])
}

model Comment {
  id      String @id @default(cuid())
  content String

  authorId String
  postId   String

  author User @relation(fields: [authorId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
  // like Like @relation(fields: [likeId], references: [id])

  // self many to many relations
  motherCommentId String?
  motherComment   Comment?  @relation("replies", fields: [motherCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies         Comment[] @relation("replies")

  // likes Like[]
  // userLikeCommentId    String
  // userLikedComments   @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  userLikeComments UserLikeComment[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // @@unique([authorId, postId])
  // @@index([postId])
}

// model Like {
//   id        String @id @default(cuid())
//   userId    String @unique
//   postId    String 
//   commentId String 

//   user    User    @relation(fields: [userId], references: [id])
//   post    Post    @relation(fields: [postId], references: [id])
//   // comment Comment @relation(fields: [commentId], references: [id])

//   // @@index([postId, userId, commentId])
//   @@index([postId, userId])

// }

model UserLikePost {
  id     String @id @default(cuid())
  userId String
  postId String
  // commentId String 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  // notificationId String
  // notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  // postNotificaitonId String
  postNotification PostNotification[]

  // @@index([postId, userId])
  // @@index([])
}

model UserLikeComment {
  id        String @id @default(cuid())
  userId    String
  // postId String @unique
  commentId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  // post Post @relation(fields: [postId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  postNotification PostNotification[]

  @@index([userId, commentId])
}

enum StatusType {
  PENDING
  ACCEPTED
  REJECTED
}

model Invitation {
  id           String  @id @default(cuid())
  senderId     String 
  senderTeamId String // 초대를 보낸 팀의 리더(리더가 여러개의 팀을 가질 수도 있으니까)가 속한 팀에'만' 초대
  receiverId   String 
  message      String?

  sender   User @relation("sender", fields: [senderId], references: [id])
  receiver User @relation("receiver", fields: [receiverId], references: [id])

  senderTeam Team @relation(fields: [senderTeamId], references: [id])

  isRead Boolean    @default(false)
  status StatusType @default(PENDING)

  // notificationId String? 이것도 됐음
  // notifications PostNotification? @relation(fields: [notificationId], references: [id])

  // inviteNotification InviteNotification? // 오리지날

  notificationId String? //이것도 됐음
  notifications PostNotification? @relation(fields: [notificationId], references: [id])

  // @@unique([senderId, receiverId])
}




// model InviteUser {
//    id String @id @default(cuid())
//     senderId String
//     senderTeamId String 
//     receiverId String

//     sender User @relation("sender",fields: [senderId], references: [id])
//   receiver User @relation("receiver", fields: [receiverId], references: [id])
//   senderTeam Team @relation(fields: [senderTeamId], references: [id])

//   inviteNotificationId String
//   inviteNotification InviteNotification @relation(fields: [inviteNotificationId], references: [id])

// }

enum MemberType {
  LEADER
  MEMBER
}

model Membership {
  id     String  @id @default(cuid())
  userId String 
  teamId String

  userType MemberType @default(MEMBER)
  // team     Team     @relation(fields: [teamId], references: [id])
  member   User      @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])
}

model Team {
  id          String  @id @default(cuid())
  leaderId    String
  name        String  @unique
  image       String?
  description String?
  goal        String?
  memberCount Int? // 이게 필요할까 싶음..

  // leader User? @relation("member", fields: [leaderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // members User[]
  members Membership[]
  // motherCommentId String?
  // motherComment   Comment?  @relation("replies", fields: [motherCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // replies         Comment[] @relation("replies")

  // leader User?  @relation("User",fields: [leaderId], references: [id])
  invitations Invitation[]
  // membership 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // membershipId String?
  // membership Membership[]
  // membership Membership @relation(fields: [membershipId], references: [id])
  // members User[]

  // @@index([name])
}

enum NotificationType {
  LIKEPOST
  LIKECOMMENT
  SEND_INVITATION
  ACCEPT_INVITATION
  REJECT_INVITATION
}

model PostNotification {
  id       String           @id @default(cuid())
  type     NotificationType // "like, comment, follow 등 노티피케이션 유형 알려줌"
  // doerId        String 
  // doerName  String @unique
  toWhomId String //@map("User")
  // relatedPostId String

  isRead Boolean @default(false)

  // relatedPost Post @relation(fields: [relatedPostId], references: [id]) // doer가 액션을 한 post

  toWhom          User?         @relation(fields: [toWhomId], references: [id])
  userLikedPostId String?
  userLikedPost   UserLikePost? @relation(fields: [userLikedPostId], references: [id], onDelete: Cascade)

  userLikedCommentId String?
  userLikedComment   UserLikeComment? @relation(fields: [userLikedCommentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  invitations
  
  // invitation Invitation[] // 이거됐음
  // invitationId String?
  // @relation(fields: [invitationId], references: [id], onDelete: Cascade)

  // InviteNotification InviteNotification[]

  // inviteNotificationId String?
  // InviteNotification InviteNotification?  @relation(fields: [inviteNotificationId], references: [id])
}

// model InviteNotification {
//   id             String         @id @default(cuid())
//   notificationId String?     @unique 
//   notification   PostNotification? @relation(fields: [notificationId], references: [id])

//   invitationId String?    @unique
//   invitation   Invitation? @relation(fields: [invitationId], references: [id])

//   createdAt DateTime @default(now())
// }

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  // @@unique([userId, providerId, providerAccountId])
  // @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  // @@index([userId])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // @@unique([identifier, token])
}
